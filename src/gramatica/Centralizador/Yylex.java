// This JLex file was machine-generated by the BNF converter
package gramatica.Centralizador;

import gramatica.java_cup.runtime.*;

public class Yylex implements gramatica.java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 65536;
	private final int YY_EOF = 65537;

	String pstring = new String();

	public int line_num() {
		return (yyline + 1);
	}

	public String buff() {
		return new String(yy_buffer, yy_buffer_index, 10).trim();
	}

	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	public Yylex(java.io.Reader reader) {
		this();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	public Yylex(java.io.InputStream instream) {
		this();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(
				instream));
	}

	private Yylex() {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int STRING = 5;
	private final int ESCAPED = 6;
	private final int YYINITIAL = 0;
	private final int COMMENT = 1;
	private final int CHAREND = 4;
	private final int CHARESC = 3;
	private final int CHAR = 2;
	private final int yy_state_dtrans[] = { 0, 85, 85, 85, 85, 85, 85 };

	private void yybegin(int state) {
		yy_lexical_state = state;
	}

	private int yy_advance() throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer, yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer, yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}

	private void yy_move_end() {
		if (yy_buffer_end > yy_buffer_start
				&& '\n' == yy_buffer[yy_buffer_end - 1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start
				&& '\r' == yy_buffer[yy_buffer_end - 1])
			yy_buffer_end--;
	}

	private boolean yy_last_was_cr = false;

	private void yy_mark_start() {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr = true;
			} else
				yy_last_was_cr = false;
		}
		yy_buffer_start = yy_buffer_index;
	}

	private void yy_mark_end() {
		yy_buffer_end = yy_buffer_index;
	}

	private void yy_to_mark() {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start)
				&& ('\r' == yy_buffer[yy_buffer_end - 1]
						|| '\n' == yy_buffer[yy_buffer_end - 1]
						|| 2028/* LS */== yy_buffer[yy_buffer_end - 1] || 2029/* PS */== yy_buffer[yy_buffer_end - 1]);
	}

	private java.lang.String yytext() {
		return (new java.lang.String(yy_buffer, yy_buffer_start, yy_buffer_end
				- yy_buffer_start));
	}

	private int yylength() {
		return yy_buffer_end - yy_buffer_start;
	}

	private char[] yy_double(char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2 * buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}

	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = { "Error: Internal error.\n",
			"Error: Unmatched input.\n" };

	private void yy_error(int code, boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}

	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i = 0; i < size1; i++) {
			for (int j = 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex == -1) ? st : st.substring(0,
						commaIndex);
				st = st.substring(commaIndex + 1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j] = Integer.parseInt(workString);
					continue;
				}
				lengthString = workString.substring(colonIndex + 1);
				sequenceLength = Integer.parseInt(lengthString);
				workString = workString.substring(0, colonIndex);
				sequenceInteger = Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}

	private int yy_acpt[] = {
	/* 0 */YY_NOT_ACCEPT,
	/* 1 */YY_NO_ANCHOR,
	/* 2 */YY_NO_ANCHOR,
	/* 3 */YY_NO_ANCHOR,
	/* 4 */YY_NO_ANCHOR,
	/* 5 */YY_NO_ANCHOR,
	/* 6 */YY_NO_ANCHOR,
	/* 7 */YY_NO_ANCHOR,
	/* 8 */YY_NO_ANCHOR,
	/* 9 */YY_NO_ANCHOR,
	/* 10 */YY_NO_ANCHOR,
	/* 11 */YY_NO_ANCHOR,
	/* 12 */YY_NO_ANCHOR,
	/* 13 */YY_NO_ANCHOR,
	/* 14 */YY_NO_ANCHOR,
	/* 15 */YY_NOT_ACCEPT,
	/* 16 */YY_NOT_ACCEPT,
	/* 17 */YY_NOT_ACCEPT,
	/* 18 */YY_NOT_ACCEPT,
	/* 19 */YY_NOT_ACCEPT,
	/* 20 */YY_NOT_ACCEPT,
	/* 21 */YY_NOT_ACCEPT,
	/* 22 */YY_NOT_ACCEPT,
	/* 23 */YY_NOT_ACCEPT,
	/* 24 */YY_NOT_ACCEPT,
	/* 25 */YY_NOT_ACCEPT,
	/* 26 */YY_NOT_ACCEPT,
	/* 27 */YY_NOT_ACCEPT,
	/* 28 */YY_NOT_ACCEPT,
	/* 29 */YY_NOT_ACCEPT,
	/* 30 */YY_NOT_ACCEPT,
	/* 31 */YY_NOT_ACCEPT,
	/* 32 */YY_NOT_ACCEPT,
	/* 33 */YY_NOT_ACCEPT,
	/* 34 */YY_NOT_ACCEPT,
	/* 35 */YY_NOT_ACCEPT,
	/* 36 */YY_NOT_ACCEPT,
	/* 37 */YY_NOT_ACCEPT,
	/* 38 */YY_NOT_ACCEPT,
	/* 39 */YY_NOT_ACCEPT,
	/* 40 */YY_NOT_ACCEPT,
	/* 41 */YY_NOT_ACCEPT,
	/* 42 */YY_NOT_ACCEPT,
	/* 43 */YY_NOT_ACCEPT,
	/* 44 */YY_NOT_ACCEPT,
	/* 45 */YY_NOT_ACCEPT,
	/* 46 */YY_NOT_ACCEPT,
	/* 47 */YY_NOT_ACCEPT,
	/* 48 */YY_NOT_ACCEPT,
	/* 49 */YY_NOT_ACCEPT,
	/* 50 */YY_NOT_ACCEPT,
	/* 51 */YY_NOT_ACCEPT,
	/* 52 */YY_NOT_ACCEPT,
	/* 53 */YY_NOT_ACCEPT,
	/* 54 */YY_NOT_ACCEPT,
	/* 55 */YY_NOT_ACCEPT,
	/* 56 */YY_NOT_ACCEPT,
	/* 57 */YY_NOT_ACCEPT,
	/* 58 */YY_NOT_ACCEPT,
	/* 59 */YY_NOT_ACCEPT,
	/* 60 */YY_NOT_ACCEPT,
	/* 61 */YY_NOT_ACCEPT,
	/* 62 */YY_NOT_ACCEPT,
	/* 63 */YY_NOT_ACCEPT,
	/* 64 */YY_NOT_ACCEPT,
	/* 65 */YY_NOT_ACCEPT,
	/* 66 */YY_NOT_ACCEPT,
	/* 67 */YY_NOT_ACCEPT,
	/* 68 */YY_NOT_ACCEPT,
	/* 69 */YY_NOT_ACCEPT,
	/* 70 */YY_NOT_ACCEPT,
	/* 71 */YY_NOT_ACCEPT,
	/* 72 */YY_NOT_ACCEPT,
	/* 73 */YY_NOT_ACCEPT,
	/* 74 */YY_NOT_ACCEPT,
	/* 75 */YY_NOT_ACCEPT,
	/* 76 */YY_NOT_ACCEPT,
	/* 77 */YY_NOT_ACCEPT,
	/* 78 */YY_NOT_ACCEPT,
	/* 79 */YY_NOT_ACCEPT,
	/* 80 */YY_NOT_ACCEPT,
	/* 81 */YY_NOT_ACCEPT,
	/* 82 */YY_NOT_ACCEPT,
	/* 83 */YY_NOT_ACCEPT,
	/* 84 */YY_NOT_ACCEPT,
	/* 85 */YY_NOT_ACCEPT,
	/* 86 */YY_NOT_ACCEPT,
	/* 87 */YY_NOT_ACCEPT,
	/* 88 */YY_NOT_ACCEPT,
	/* 89 */YY_NOT_ACCEPT,
	/* 90 */YY_NOT_ACCEPT,
	/* 91 */YY_NOT_ACCEPT,
	/* 92 */YY_NOT_ACCEPT,
	/* 93 */YY_NOT_ACCEPT,
	/* 94 */YY_NOT_ACCEPT,
	/* 95 */YY_NOT_ACCEPT,
	/* 96 */YY_NOT_ACCEPT,
	/* 97 */YY_NOT_ACCEPT,
	/* 98 */YY_NOT_ACCEPT,
	/* 99 */YY_NOT_ACCEPT,
	/* 100 */YY_NOT_ACCEPT,
	/* 101 */YY_NOT_ACCEPT,
	/* 102 */YY_NOT_ACCEPT,
	/* 103 */YY_NOT_ACCEPT,
	/* 104 */YY_NOT_ACCEPT,
	/* 105 */YY_NOT_ACCEPT,
	/* 106 */YY_NOT_ACCEPT,
	/* 107 */YY_NOT_ACCEPT,
	/* 108 */YY_NOT_ACCEPT,
	/* 109 */YY_NOT_ACCEPT,
	/* 110 */YY_NOT_ACCEPT,
	/* 111 */YY_NOT_ACCEPT,
	/* 112 */YY_NOT_ACCEPT,
	/* 113 */YY_NOT_ACCEPT,
	/* 114 */YY_NOT_ACCEPT,
	/* 115 */YY_NOT_ACCEPT,
	/* 116 */YY_NOT_ACCEPT,
	/* 117 */YY_NOT_ACCEPT,
	/* 118 */YY_NOT_ACCEPT,
	/* 119 */YY_NOT_ACCEPT };
	private int yy_cmap[] = unpackFromString(
			1,
			65538,
			"0:9,28:2,0,28:2,0:18,7,0:15,27:10,0:7,18,0,14,21,0:3,23,1,0:2,16,8,0:2,12,0"
					+ ":3,25,0:12,5,17,4,10,9,0,24,0,3,0:2,20,13,2,11,22,0,6,15,19,26,0:65418,29:2")[0];

	private int yy_rmap[] = unpackFromString(
			1,
			120,
			"0,1:2,2,1:11,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,"
					+ "26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,"
					+ "51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,"
					+ "76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100"
					+ ",101,102,103,104,105,106,107")[0];

	private int yy_nxt[][] = unpackFromString(
			108,
			30,
			"-1,15,-1:5,1,-1,2,-1:2,16,-1,17,-1,18,87,-1:3,105,-1,86,-1,104,-1,3,1,4,-1:"
					+ "57,3,-1:4,112,-1:32,19,119,-1:32,20,-1:23,21,-1:32,26,-1:38,88,-1:31,27,-1:"
					+ "32,28,-1:31,116,-1:20,29,-1:20,90,-1:30,31,-1:33,33,-1:23,92,-1:37,34,-1:40"
					+ ",35,-1:11,93,-1,36,-1:28,113,-1:30,37,-1:47,40,-1:14,94,-1:27,42,-1:27,44,-"
					+ "1:30,45,-1:34,46,-1:38,47,-1:28,97,-1:23,49,-1:23,50,-1:28,5,-1:49,51,-1:5,"
					+ "52,-1:38,117,-1:23,53,-1:33,56,-1:36,58,-1:30,98,-1:17,6,-1:43,59,-1:18,60,"
					+ "-1:34,61,-1:26,114,-1:37,62,-1:14,63,-1:52,99,-1:12,65,-1:31,66,-1:24,68,-1"
					+ ":40,69,-1:14,70,-1:37,73,-1:39,7,-1:13,74,-1:44,118,-1:19,75,-1:25,8,-1:29,"
					+ "9,-1:29,10,-1:27,76,-1:31,77,-1:30,78,-1:27,102,-1:36,11,-1:23,80,-1:27,82,"
					+ "-1:30,103,-1:36,12,-1:23,83,-1:44,13,-1:20,14,-1:47,4,-1:9,24,-1:23,22,-1:4"
					+ "1,32,-1:27,30,-1:19,91,-1:31,109,-1:30,38,-1:32,41,-1:26,48,-1:34,110,-1:25"
					+ ",54,-1:27,55,-1:27,64,-1:32,72,-1:25,71,-1:33,79,-1:28,81,-1:29,84,-1:33,89"
					+ ",-1:23,23,-1:41,107,-1:19,95,-1:30,39,-1:29,96,-1:30,57,-1:25,100,-1:29,25,"
					+ "-1:32,43,-1:26,67,-1:41,106,-1:17,108,-1:43,111,-1:21,101,-1:29,115,-1:20");

	public gramatica.java_cup.runtime.Symbol next_token()
			throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol)
				yy_lookahead = YY_BOL;
			else
				yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {
				return null;
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			} else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				} else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1: { /* ignore white space. */
					}
					case -2:
						break;
					case 2: {
						return new Symbol(sym._SYMB_10);
					}
					case -3:
						break;
					case 3: {
						return new Symbol(sym._INTEGER_, new Integer(yytext()));
					}
					case -4:
						break;
					case 4:

					case -5:
						break;
					case 5: {
						return new Symbol(sym._SYMB_6);
					}
					case -6:
						break;
					case 6: {
						return new Symbol(sym._SYMB_4);
					}
					case -7:
						break;
					case 7: {
						return new Symbol(sym._SYMB_7);
					}
					case -8:
						break;
					case 8: {
						return new Symbol(sym._SYMB_9);
					}
					case -9:
						break;
					case 9: {
						return new Symbol(sym._SYMB_5);
					}
					case -10:
						break;
					case 10: {
						return new Symbol(sym._SYMB_8);
					}
					case -11:
						break;
					case 11: {
						return new Symbol(sym._SYMB_1);
					}
					case -12:
						break;
					case 12: {
						return new Symbol(sym._SYMB_0);
					}
					case -13:
						break;
					case 13: {
						return new Symbol(sym._SYMB_3);
					}
					case -14:
						break;
					case 14: {
						return new Symbol(sym._SYMB_2);
					}
					case -15:
						break;
					default:
						yy_error(YY_E_INTERNAL, false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
