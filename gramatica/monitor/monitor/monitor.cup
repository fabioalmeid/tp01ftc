// -*- Java -*- This Cup file was machine-generated by BNFC
package monitor;

parser code {:
  public monitor.Absyn.Tarefa pTarefa() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (monitor.Absyn.Tarefa) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal monitor.Absyn.Tarefa Tarefa;
nonterminal monitor.Absyn.Acao Acao;
nonterminal monitor.Absyn.Dados Dados;
nonterminal monitor.Absyn.Quantidade Quantidade;
nonterminal monitor.Absyn.Operador Operador;
nonterminal monitor.Absyn.Hora Hora;

terminal _SYMB_0;    //   Temperatura de
terminal _SYMB_1;    //   g/dL
terminal _SYMB_2;    //   mg/dL
terminal _SYMB_3;    //   Pressao Arterial
terminal _SYMB_4;    //   :
terminal _SYMB_5;    //   h:
terminal _SYMB_6;    //   Bilirrubina
terminal _SYMB_7;    //   C
terminal _SYMB_8;    //   Hemoglobina
terminal _SYMB_9;    //   as
terminal _SYMB_10;    //   e
terminal _SYMB_11;    //   m
terminal _SYMB_12;    //   mmHg



terminal Integer _INTEGER_;





start with Tarefa;


Tarefa ::= Acao:p_1  {: RESULT = new monitor.Absyn.ETarefa(p_1); :} 
;
Acao ::= Dados:p_1 _SYMB_9 Hora:p_3  {: RESULT = new monitor.Absyn.EAcao(p_1,p_3); :} 
  | Acao:p_1 Operador:p_2 Acao:p_3  {: RESULT = new monitor.Absyn.EAcao2(p_1,p_2,p_3); :}
;
Dados ::= _SYMB_0 Quantidade:p_2 _SYMB_7  {: RESULT = new monitor.Absyn.EDados(p_2); :} 
  | _SYMB_6 Quantidade:p_2 _SYMB_1  {: RESULT = new monitor.Absyn.EDados1(p_2); :}
  | _SYMB_8 Quantidade:p_2 _SYMB_2  {: RESULT = new monitor.Absyn.EDados2(p_2); :}
  | _SYMB_3 Quantidade:p_2 _SYMB_4 Quantidade:p_4 _SYMB_12  {: RESULT = new monitor.Absyn.EDados3(p_2,p_4); :}
;
Quantidade ::= _INTEGER_:p_1  {: RESULT = new monitor.Absyn.EQuantidade(p_1); :} 
;
Operador ::= _SYMB_10  {: RESULT = new monitor.Absyn.EOperador(); :} 
;
Hora ::= _INTEGER_:p_1 _SYMB_5 _INTEGER_:p_3 _SYMB_11  {: RESULT = new monitor.Absyn.EHora(p_1,p_3); :} 
;

